{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.c66eb35d581c3cd38a7d.hot-update.js","sources":["webpack:///./pages/calendar.js"],"sourcesContent":["import { Calendar, Badge, Drawer, List, Avatar, Card, Icon, Row, Col, Tag, Progress, Button } from 'antd';\r\nimport Markdown from 'react-markdown'\r\n// import { Fragment } from 'react';\r\nimport { useState, useEffect, useReducer, useContext } from 'react'\r\nimport { withPageRouter } from '../components/withPageRouter'\r\n// import { Parser } from 'json2csv'\r\nimport CsvDownload from 'react-json-to-csv'\r\nimport gql from 'nanographql'\r\nimport moment from 'moment'\r\n\r\n// const client = new GraphQLClient({\r\n//   url: 'https://api.github.com/graphql',\r\n\r\n// })\r\n\r\nconst ISSUES_QUERY = gql`\r\nquery ($name: String!, $owner: String!) { \r\n  repository(name: $name, owner: $owner){\r\n    issues(last:100){\r\n      edges{\r\n        node{\r\n          id\r\n          title\r\n          createdAt\r\n          url\r\n          bodyText\r\n          bodyHTML\r\n          body\r\n          assignees (first:10){\r\n            edges {\r\n              node {\r\n                id\r\n                name\r\n                avatarUrl\r\n              }\r\n            }\r\n          }\r\n          author{\r\n            login\r\n            avatarUrl\r\n          }\r\n          milestone {\r\n            id\r\n            dueOn\r\n          }\r\n          state\r\n          labels(first:10) {\r\n            edges {\r\n              node {\r\n                id\r\n                color\r\n                name\r\n              }\r\n            }\r\n          }\r\n          projectCards{\r\n            nodes{\r\n              column{\r\n                name\r\n                createdAt\r\n              }\r\n            }\r\n            edges{\r\n              node {\r\n                id\r\n                note\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nconst fetcher = async (auth) => {\r\n  const result = await fetch('https://api.github.com/graphql', {\r\n    method: \"POST\",\r\n    headers: { 'Authorization': \"token \" + auth },\r\n    body: ISSUES_QUERY({ name: \"digital-marketing-team\", owner: \"ACalaCensus\" })\r\n  })\r\n\r\n  const prime = await result.json()\r\n  const { data: { repository: { issues: { edges } } } } = prime\r\n  \r\n  const cleaned = edges.filter(({ node }) => node.milestone !== null)\r\n  // console.log(\"cleaned:\")\r\n  // console.log(cleaned)\r\n  \r\n  return cleaned.map(({ node }, idx) => {\r\n    const {\r\n      title,\r\n      id,\r\n      url,\r\n      assignees: { edges: assignee_edges },\r\n      author: { login, avatarUrl: authorAvatar },\r\n      bodyText,\r\n      createdAt,\r\n      bodyHTML,\r\n      body,\r\n      milestone: { dueOn },\r\n      state,\r\n      labels: { edges: label_edges },\r\n      projectCards: {\r\n        nodes: [{ column: { name: column_name } }],\r\n        edges: [{ node: { note: card_note, url: card_url } }]\r\n      }\r\n    } = node\r\n\r\n    return {\r\n      key: id,\r\n      issue_title: title,\r\n      createdAt,\r\n      bodyText,\r\n      bodyHTML,\r\n      body,\r\n      state,\r\n      dueOn,\r\n      issue_author: { user_id: login, authorAvatar },\r\n      issue_url: url,\r\n      assignees: assignee_edges.map(({ node: { name, avatarUrl } }) => ({ name, avatarUrl })),\r\n      labels: label_edges.map(({ node: { color, name, id } }) => ({ color : `#${color}`, name, id })),\r\n      column_name,\r\n      card_info: { card_note, card_url }\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfunction getListData(data, value) {\r\n\r\n  let input = moment.utc(value).format(\"MMM Do YYYY\")\r\n  // console.log(\"input:\", input)\r\n\r\n  // let fetchedDate = new Date(\"2019-06-28T00:00:00Z\").toISOString().split('T')[0]\r\n  let matches = data.filter( cur => moment.utc(cur.dueOn).format(\"MMM Do YYYY\") === input)\r\n  return matches.map(({ state, issue_title, dueOn, key }) => ({\r\n    type: state === \"OPEN\" ? 'error' : 'success',\r\n    content: issue_title,\r\n    dueOn,\r\n    key\r\n  }))\r\n}\r\n\r\n// console.log(\"moment for dueOn:\", moment(\"2019-07-11T00:00:00Z\"))\r\n\r\n\r\nconst DataCells = ({ value }) => {\r\n  const { state: { data } } = useContext(Context)\r\n  // console.log(\"data:\", data )\r\n  // console.log(\"value:\", value._d)\r\n  if (!data) {\r\n    return null\r\n  } else {\r\n    const filteredIssues = getListData(data, value._d)\r\n    // console.log(\"filteredIssues\", filteredIssues)\r\n    // console.log('issues: ' + data)\r\n\r\n    // console.log(\"state: \" + state )\r\n    return (\r\n      <ul className=\"events\">\r\n        {filteredIssues.map(item => (\r\n          <li key={item.key}>\r\n            <Badge status={item.type} text={item.content} className=\"ant-badge-status\" />\r\n          </li>\r\n        ))}\r\n        <style jsx>{`\r\n        .events {\r\n          list-style: none;\r\n          margin: 0;\r\n          padding: 0;\r\n        }\r\n        .events .ant-badge-status {\r\n          overflow: hidden;\r\n          white-space: nowrap;\r\n          width: 100%;\r\n          text-overflow: ellipsis;\r\n          font-size: 12px;\r\n        }\r\n        `}\r\n        </style>\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nconst dateCellRender = value => <DataCells value={value} />\r\n\r\nfunction getMonthData(value) {\r\n  if (value.month() === 8) {\r\n    return 1394;\r\n  }\r\n}\r\n\r\nfunction monthCellRender(value) {\r\n  const num = getMonthData(value);\r\n  return num ? (\r\n    <div className=\"notes-month\">\r\n      <section>{num}</section>\r\n      <span>Backlog number</span>\r\n      <style jsx>{`\r\n      .notes-month {\r\n        text-align: center;\r\n        font-size: 28px;\r\n      }\r\n      .notes-month section {\r\n        font-size: 28px;\r\n      }\r\n      `}\r\n      </style>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\n\r\n// REDUCER =================================\r\nconst calendarReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'LOAD': {\r\n      return {\r\n        auth: action.auth,\r\n        data: action.data,\r\n        loaded: true\r\n      }\r\n    }\r\n    case 'OPEN_DRAWER': {\r\n      return {\r\n        ...state,\r\n        drawerOpen: true,\r\n        drawerContents: action.contents\r\n      }\r\n    }\r\n    case 'CLOSE_DRAWER': {\r\n      return {\r\n        ...state,\r\n        drawerOpen: false\r\n      }\r\n    }\r\n    default: return {\r\n      ...state\r\n    }\r\n  }\r\n}\r\n\r\n// CONTEXT ==================================\r\nconst Context = React.createContext()\r\n\r\n// INITIAL STATE ============================\r\nconst initialState = {\r\n  auth: \"loading...\",\r\n  loaded: false,\r\n  data: [],\r\n  drawerOpen: false,\r\n  drawerContents: []\r\n}\r\n\r\nconst retrieveMatches = (data, date) => {\r\n  const matches = data.filter(datum => moment.utc(date).format(\"MMM Do YYYY\") === moment.utc(datum.dueOn).format(\"MMM Do YYYY\"))\r\n  return matches\r\n}\r\n\r\n\r\nconst StatBar = ({ body, percentDone, tags }) => {\r\n  const bodyImgsRegex = /(\\!\\[)(.*?)(\\))/g\r\n  const cleanedBody = body.replace(bodyImgsRegex, \"\")\r\n  return (\r\n    <div> \r\n    { percentDone === 100 ? <div><Progress percent={percentDone} size=\"small\" /><br/></div>\r\n    : percentDone > 0 ? <div><Progress percent={percentDone} size=\"small\" status=\"active\"/><br/></div>\r\n    : null\r\n    } \r\n    { tags.length > 0 ? tags.map(tag => (\r\n      <div key={tag.id} className=\"wrap-tag\" ><Tag color={tag.color}>{tag.name}</Tag></div>)\r\n    )\r\n    : null\r\n    }\r\n    {/* <Markdown source={cleanedBody}/> */}\r\n    <style jsx>{`\r\n      img { max-width: 100%; height: auto;}\r\n     .wrap-tag { margin-bottom: 3px; border: none; background: none; \r\n     }`}</style>\r\n    </div>  \r\n  )\r\n}\r\n\r\n\r\nconst { Meta } = Card\r\n\r\n\r\nconst IssueCard = ({ issue }) => {\r\n  // const { state: { data } } = useContext(Context)\r\n  const {\r\n    key,\r\n    card_info: { card_url },\r\n    issue_author: { authorAvatar },\r\n    issue_title,\r\n    issue_url,\r\n    state,\r\n    column_name,\r\n    labels,\r\n    assignees,\r\n    bodyText,\r\n    body,\r\n    bodyHTML,\r\n    card_info: { card_note }\r\n  } = issue\r\n\r\n  console.log(\"labels: \" + JSON.stringify(labels))\r\n  const imageTagsRegex = /<img [^>]*src=\"[^\"]*\"[^>]*>/gm\r\n  const imageSrcRegex = /.*src=\"([^\"]*)\".*/\r\n  const images = bodyHTML.length > 0 ? bodyHTML.match(imageTagsRegex) : null\r\n  const bannerSrc = images !== null ? images.map(img => img.replace(imageSrcRegex, '$1'))[0] : \"\"\r\n\r\n  const allBracketsRegex = /\\[.\\]/g\r\n  const doneBracketsRegex = /\\[x\\]/g\r\n  // console.log(\"regex length: \" + body.match(allBracketsRegex))\r\n  const todosCount = body.length > 0 ? body.match(allBracketsRegex) : 0\r\n  const doneCount = body.length > 0 ? body.match(doneBracketsRegex) : 0\r\n  const percentDone = todosCount !== null ? Math.floor((doneCount.length / todosCount.length) * 100) : null\r\n\r\n\r\n  // console.log(\"bannerSrc: \" + bannerSrc)\r\n\r\n  return (\r\n    <Card\r\n      key={key}\r\n      style={{ width: '100%' }}\r\n      cover={bannerSrc !== \"\" ?\r\n        <img\r\n          alt={issue_title}\r\n          src={bannerSrc}\r\n        />\r\n        : null\r\n      }\r\n      actions={[\r\n        <a href={card_url}>\r\n          <Icon type=\"project\"/>\r\n        </a>,\r\n        <a href={issue_url}>\r\n          <Icon type=\"edit\"/>\r\n        </a>\r\n        ,\r\n        // <Icon type=\"ellipsis\">\r\n        <Avatar src={ assignees.length > 0 ? assignees[0].avatarUrl : \"\" } size={\"small\"}/>\r\n        // </Icon>\r\n\r\n      ]}\r\n    >\r\n      <Meta\r\n        avatar={<Avatar src={authorAvatar} />}\r\n        title={issue_title}\r\n        description={<StatBar body={body} percentDone={percentDone} tags={labels}/>}\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n/*\r\n    return {\r\n      key: idx,\r\n      issue_title: title,\r\n      bodyText,\r\n      bodyHTML,\r\n      body,\r\n      state,\r\n      dueOn,\r\n      issue_author: { user_id: login, authorAvatar },\r\n      issue_url: url,\r\n      assignees: assignee_edges.map(({ node: { name, avatarUrl } }) => ({ name, avatarUrl })),\r\n      labels: label_edges.map(({ node: { color, name, id } }) => ({ color : `#${color}`, name, id })),\r\n      column_name,\r\n      card_info: { card_note, card_url }\r\n    }\r\n  */\r\n\r\n const getFormattedDate = inDate => {\r\n  var date = new Date(inDate);\r\n  var month = date.getMonth() + 1;\r\n  var day = date.getDate();\r\n  var year = date.getFullYear();\r\n  return month + \"/\" + day + \"/\" + year;\r\n}\r\n\r\n// let testDateCreated = \"2019-06-19T14:45:32Z\"\r\n// let testDateDue = \"2019-06-28T00:00:00Z\" \r\n\r\n// let formatCreatedDate = GetFormattedDate(testDateCreated) //?\r\n\r\nconst getCampaign = labels => {\r\n  const filtered = labels.filter(label => label.name.match(/campaign.*/) !== null)\r\n  console.log(\"filtered: \" + JSON.stringify(filtered))\r\n  return filtered.length > 0 ? filtered[0].name.match(/campaign: (.*)/)[1] : \"\"\r\n}\r\n\r\nconst dlcsv = (data) => {\r\n  const fileData = data.map(({ \r\n    key,\r\n    dueOn,\r\n    issue_title,\r\n    createdAt,\r\n    labels,\r\n    bodyText,\r\n    issue_author: { user_id },\r\n    issue_url\r\n  }) => ({\r\n    'ID': key,\r\n    'Event Name': issue_title,\r\n    'Start Date': `${getFormattedDate(createdAt)} 12:00`,\r\n    'End Date': `${getFormattedDate(dueOn)} 12:00`,\r\n    'Campaign': getCampaign(labels) ,\r\n    'Description': bodyText.replace(/(\\r\\n|\\n|\\r)/gm,\"  \").replace(/,.*$/, \"\"),\r\n    'Communication Type': \"Email Marketing\",\r\n    'Decennial Related':  labels.filter(label => label.name === 'decennial').length > 0 ? \"TRUE\" : \"FALSE\",\r\n    'Key Date':  labels.filter(label => label.name === 'key date').length > 0 ? \"TRUE\" : \"FALSE\",\r\n    'Post to public calendar': \"FALSE\",\r\n    'Census POC': user_id,\r\n    'Item Type': \"Item\",\r\n    'Path': issue_url\r\n  }))\r\n  return fileData\r\n}\r\n\r\n\r\nconst Index = ({ router: { query: { auth } } }) => {\r\n  const [state, dispatch] = useReducer(calendarReducer, initialState)\r\n  useEffect(() => {\r\n    const fetchData = (auth) => fetcher(auth).then(res => {\r\n      dispatch({\r\n        type: 'LOAD',\r\n        data: res,\r\n        auth: auth\r\n      })\r\n      // console.log(\"res: \" + JSON.stringify(res))\r\n    })\r\n\r\n    fetchData(auth)\r\n  }, [])\r\n  const fireDateSelection = (e) => {\r\n    // console.log(\"e._d: \" + new Date(e._d).setHours(0,0,0,0))\r\n    const matched = retrieveMatches(state.data, e._d)\r\n    dispatch({\r\n      type: 'OPEN_DRAWER',\r\n      contents: matched\r\n    })\r\n  }\r\n  const closeDrawer = () => {\r\n    dispatch({\r\n      type: 'CLOSE_DRAWER'\r\n    })\r\n  }\r\n\r\n\r\n  // console.log(\"DATA: \" + JSON.stringify(state))\r\n  return (\r\n    <Context.Provider value={{ state, dispatch }}>\r\n      <Calendar dateCellRender={dateCellRender} monthCellRender={monthCellRender} onSelect={fireDateSelection} />\r\n      <Drawer\r\n        title=\"Issues:\"\r\n        placement=\"right\"\r\n        closable={true}\r\n        onClose={closeDrawer}\r\n        visible={state.drawerOpen}\r\n        width={\"300px\"}\r\n      >\r\n      {state.drawerContents ? state.drawerContents.map((issue, idx) => (\r\n        <div>\r\n          <IssueCard key={issue.key} issue={issue} /><br/>\r\n        </div>\r\n      )) : \"\"}\r\n      </Drawer>\r\n      {state.data.length > 0 ? \r\n        <CsvDownload data={dlcsv(state.data)}>\r\n            Download Calendar .csv\r\n          {/* <Button icon=\"download\" size=\"medium\">\r\n          </Button> */}\r\n        </CsvDownload>\r\n        : \"\"}\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport default withPageRouter(Index)"],"mappings":"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","sourceRoot":""}